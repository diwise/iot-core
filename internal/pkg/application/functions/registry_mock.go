// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package functions

import (
	"context"
	"sync"
	"time"
)

// Ensure, that RegistryStorerMock does implement RegistryStorer.
// If this is not the case, regenerate this file with moq.
var _ RegistryStorer = &RegistryStorerMock{}

// RegistryStorerMock is a mock implementation of RegistryStorer.
//
//	func TestSomethingThatUsesRegistryStorer(t *testing.T) {
//
//		// make and configure a mocked RegistryStorer
//		mockedRegistryStorer := &RegistryStorerMock{
//			AddFunc: func(ctx context.Context, id string, label string, value float64, timestamp time.Time) error {
//				panic("mock out the Add method")
//			},
//			AddSettingFunc: func(ctx context.Context, id string, s Setting) error {
//				panic("mock out the AddSetting method")
//			},
//			GetSettingsFunc: func(ctx context.Context) ([]Setting, error) {
//				panic("mock out the GetSettings method")
//			},
//			LoadStateFunc: func(ctx context.Context, id string) ([]byte, error) {
//				panic("mock out the LoadState method")
//			},
//			SaveStateFunc: func(ctx context.Context, id string, a any) error {
//				panic("mock out the SaveState method")
//			},
//		}
//
//		// use mockedRegistryStorer in code that requires RegistryStorer
//		// and then make assertions.
//
//	}
type RegistryStorerMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, id string, label string, value float64, timestamp time.Time) error

	// AddSettingFunc mocks the AddSetting method.
	AddSettingFunc func(ctx context.Context, id string, s Setting) error

	// GetSettingsFunc mocks the GetSettings method.
	GetSettingsFunc func(ctx context.Context) ([]Setting, error)

	// LoadStateFunc mocks the LoadState method.
	LoadStateFunc func(ctx context.Context, id string) ([]byte, error)

	// SaveStateFunc mocks the SaveState method.
	SaveStateFunc func(ctx context.Context, id string, a any) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Label is the label argument value.
			Label string
			// Value is the value argument value.
			Value float64
			// Timestamp is the timestamp argument value.
			Timestamp time.Time
		}
		// AddSetting holds details about calls to the AddSetting method.
		AddSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// S is the s argument value.
			S Setting
		}
		// GetSettings holds details about calls to the GetSettings method.
		GetSettings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// LoadState holds details about calls to the LoadState method.
		LoadState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// SaveState holds details about calls to the SaveState method.
		SaveState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// A is the a argument value.
			A any
		}
	}
	lockAdd         sync.RWMutex
	lockAddSetting  sync.RWMutex
	lockGetSettings sync.RWMutex
	lockLoadState   sync.RWMutex
	lockSaveState   sync.RWMutex
}

// Add calls AddFunc.
func (mock *RegistryStorerMock) Add(ctx context.Context, id string, label string, value float64, timestamp time.Time) error {
	if mock.AddFunc == nil {
		panic("RegistryStorerMock.AddFunc: method is nil but RegistryStorer.Add was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		Label     string
		Value     float64
		Timestamp time.Time
	}{
		Ctx:       ctx,
		ID:        id,
		Label:     label,
		Value:     value,
		Timestamp: timestamp,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, id, label, value, timestamp)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedRegistryStorer.AddCalls())
func (mock *RegistryStorerMock) AddCalls() []struct {
	Ctx       context.Context
	ID        string
	Label     string
	Value     float64
	Timestamp time.Time
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		Label     string
		Value     float64
		Timestamp time.Time
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// AddSetting calls AddSettingFunc.
func (mock *RegistryStorerMock) AddSetting(ctx context.Context, id string, s Setting) error {
	if mock.AddSettingFunc == nil {
		panic("RegistryStorerMock.AddSettingFunc: method is nil but RegistryStorer.AddSetting was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		S   Setting
	}{
		Ctx: ctx,
		ID:  id,
		S:   s,
	}
	mock.lockAddSetting.Lock()
	mock.calls.AddSetting = append(mock.calls.AddSetting, callInfo)
	mock.lockAddSetting.Unlock()
	return mock.AddSettingFunc(ctx, id, s)
}

// AddSettingCalls gets all the calls that were made to AddSetting.
// Check the length with:
//
//	len(mockedRegistryStorer.AddSettingCalls())
func (mock *RegistryStorerMock) AddSettingCalls() []struct {
	Ctx context.Context
	ID  string
	S   Setting
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		S   Setting
	}
	mock.lockAddSetting.RLock()
	calls = mock.calls.AddSetting
	mock.lockAddSetting.RUnlock()
	return calls
}

// GetSettings calls GetSettingsFunc.
func (mock *RegistryStorerMock) GetSettings(ctx context.Context) ([]Setting, error) {
	if mock.GetSettingsFunc == nil {
		panic("RegistryStorerMock.GetSettingsFunc: method is nil but RegistryStorer.GetSettings was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSettings.Lock()
	mock.calls.GetSettings = append(mock.calls.GetSettings, callInfo)
	mock.lockGetSettings.Unlock()
	return mock.GetSettingsFunc(ctx)
}

// GetSettingsCalls gets all the calls that were made to GetSettings.
// Check the length with:
//
//	len(mockedRegistryStorer.GetSettingsCalls())
func (mock *RegistryStorerMock) GetSettingsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetSettings.RLock()
	calls = mock.calls.GetSettings
	mock.lockGetSettings.RUnlock()
	return calls
}

// LoadState calls LoadStateFunc.
func (mock *RegistryStorerMock) LoadState(ctx context.Context, id string) ([]byte, error) {
	if mock.LoadStateFunc == nil {
		panic("RegistryStorerMock.LoadStateFunc: method is nil but RegistryStorer.LoadState was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockLoadState.Lock()
	mock.calls.LoadState = append(mock.calls.LoadState, callInfo)
	mock.lockLoadState.Unlock()
	return mock.LoadStateFunc(ctx, id)
}

// LoadStateCalls gets all the calls that were made to LoadState.
// Check the length with:
//
//	len(mockedRegistryStorer.LoadStateCalls())
func (mock *RegistryStorerMock) LoadStateCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockLoadState.RLock()
	calls = mock.calls.LoadState
	mock.lockLoadState.RUnlock()
	return calls
}

// SaveState calls SaveStateFunc.
func (mock *RegistryStorerMock) SaveState(ctx context.Context, id string, a any) error {
	if mock.SaveStateFunc == nil {
		panic("RegistryStorerMock.SaveStateFunc: method is nil but RegistryStorer.SaveState was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		A   any
	}{
		Ctx: ctx,
		ID:  id,
		A:   a,
	}
	mock.lockSaveState.Lock()
	mock.calls.SaveState = append(mock.calls.SaveState, callInfo)
	mock.lockSaveState.Unlock()
	return mock.SaveStateFunc(ctx, id, a)
}

// SaveStateCalls gets all the calls that were made to SaveState.
// Check the length with:
//
//	len(mockedRegistryStorer.SaveStateCalls())
func (mock *RegistryStorerMock) SaveStateCalls() []struct {
	Ctx context.Context
	ID  string
	A   any
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		A   any
	}
	mock.lockSaveState.RLock()
	calls = mock.calls.SaveState
	mock.lockSaveState.RUnlock()
	return calls
}
