// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/diwise/iot-core/pkg/messaging/events"
	"github.com/diwise/messaging-golang/pkg/messaging"
	"sync"
)

// Ensure, that AppMock does implement App.
// If this is not the case, regenerate this file with moq.
var _ App = &AppMock{}

// AppMock is a mock implementation of App.
//
//	func TestSomethingThatUsesApp(t *testing.T) {
//
//		// make and configure a mocked App
//		mockedApp := &AppMock{
//			MessageAcceptedFunc: func(ctx context.Context, evt events.MessageAccepted, msgctx messaging.MsgContext) error {
//				panic("mock out the MessageAccepted method")
//			},
//			MessageReceivedFunc: func(ctx context.Context, msg events.MessageReceived) (*events.MessageAccepted, error) {
//				panic("mock out the MessageReceived method")
//			},
//		}
//
//		// use mockedApp in code that requires App
//		// and then make assertions.
//
//	}
type AppMock struct {
	// MessageAcceptedFunc mocks the MessageAccepted method.
	MessageAcceptedFunc func(ctx context.Context, evt events.MessageAccepted, msgctx messaging.MsgContext) error

	// MessageReceivedFunc mocks the MessageReceived method.
	MessageReceivedFunc func(ctx context.Context, msg events.MessageReceived) (*events.MessageAccepted, error)

	// calls tracks calls to the methods.
	calls struct {
		// MessageAccepted holds details about calls to the MessageAccepted method.
		MessageAccepted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Evt is the evt argument value.
			Evt events.MessageAccepted
			// Msgctx is the msgctx argument value.
			Msgctx messaging.MsgContext
		}
		// MessageReceived holds details about calls to the MessageReceived method.
		MessageReceived []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg events.MessageReceived
		}
	}
	lockMessageAccepted sync.RWMutex
	lockMessageReceived sync.RWMutex
}

// MessageAccepted calls MessageAcceptedFunc.
func (mock *AppMock) MessageAccepted(ctx context.Context, evt events.MessageAccepted, msgctx messaging.MsgContext) error {
	if mock.MessageAcceptedFunc == nil {
		panic("AppMock.MessageAcceptedFunc: method is nil but App.MessageAccepted was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Evt    events.MessageAccepted
		Msgctx messaging.MsgContext
	}{
		Ctx:    ctx,
		Evt:    evt,
		Msgctx: msgctx,
	}
	mock.lockMessageAccepted.Lock()
	mock.calls.MessageAccepted = append(mock.calls.MessageAccepted, callInfo)
	mock.lockMessageAccepted.Unlock()
	return mock.MessageAcceptedFunc(ctx, evt, msgctx)
}

// MessageAcceptedCalls gets all the calls that were made to MessageAccepted.
// Check the length with:
//
//	len(mockedApp.MessageAcceptedCalls())
func (mock *AppMock) MessageAcceptedCalls() []struct {
	Ctx    context.Context
	Evt    events.MessageAccepted
	Msgctx messaging.MsgContext
} {
	var calls []struct {
		Ctx    context.Context
		Evt    events.MessageAccepted
		Msgctx messaging.MsgContext
	}
	mock.lockMessageAccepted.RLock()
	calls = mock.calls.MessageAccepted
	mock.lockMessageAccepted.RUnlock()
	return calls
}

// MessageReceived calls MessageReceivedFunc.
func (mock *AppMock) MessageReceived(ctx context.Context, msg events.MessageReceived) (*events.MessageAccepted, error) {
	if mock.MessageReceivedFunc == nil {
		panic("AppMock.MessageReceivedFunc: method is nil but App.MessageReceived was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg events.MessageReceived
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockMessageReceived.Lock()
	mock.calls.MessageReceived = append(mock.calls.MessageReceived, callInfo)
	mock.lockMessageReceived.Unlock()
	return mock.MessageReceivedFunc(ctx, msg)
}

// MessageReceivedCalls gets all the calls that were made to MessageReceived.
// Check the length with:
//
//	len(mockedApp.MessageReceivedCalls())
func (mock *AppMock) MessageReceivedCalls() []struct {
	Ctx context.Context
	Msg events.MessageReceived
} {
	var calls []struct {
		Ctx context.Context
		Msg events.MessageReceived
	}
	mock.lockMessageReceived.RLock()
	calls = mock.calls.MessageReceived
	mock.lockMessageReceived.RUnlock()
	return calls
}
