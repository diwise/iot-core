// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that DeviceManagementClientMock does implement DeviceManagementClient.
// If this is not the case, regenerate this file with moq.
var _ DeviceManagementClient = &DeviceManagementClientMock{}

// DeviceManagementClientMock is a mock implementation of DeviceManagementClient.
//
// 	func TestSomethingThatUsesDeviceManagementClient(t *testing.T) {
//
// 		// make and configure a mocked DeviceManagementClient
// 		mockedDeviceManagementClient := &DeviceManagementClientMock{
// 			FindDeviceFromInternalIDFunc: func(ctx context.Context, deviceID string) (Device, error) {
// 				panic("mock out the FindDeviceFromInternalID method")
// 			},
// 		}
//
// 		// use mockedDeviceManagementClient in code that requires DeviceManagementClient
// 		// and then make assertions.
//
// 	}
type DeviceManagementClientMock struct {
	// FindDeviceFromInternalIDFunc mocks the FindDeviceFromInternalID method.
	FindDeviceFromInternalIDFunc func(ctx context.Context, deviceID string) (Device, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindDeviceFromInternalID holds details about calls to the FindDeviceFromInternalID method.
		FindDeviceFromInternalID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
	}
	lockFindDeviceFromInternalID sync.RWMutex
}

// FindDeviceFromInternalID calls FindDeviceFromInternalIDFunc.
func (mock *DeviceManagementClientMock) FindDeviceFromInternalID(ctx context.Context, deviceID string) (Device, error) {
	if mock.FindDeviceFromInternalIDFunc == nil {
		panic("DeviceManagementClientMock.FindDeviceFromInternalIDFunc: method is nil but DeviceManagementClient.FindDeviceFromInternalID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockFindDeviceFromInternalID.Lock()
	mock.calls.FindDeviceFromInternalID = append(mock.calls.FindDeviceFromInternalID, callInfo)
	mock.lockFindDeviceFromInternalID.Unlock()
	return mock.FindDeviceFromInternalIDFunc(ctx, deviceID)
}

// FindDeviceFromInternalIDCalls gets all the calls that were made to FindDeviceFromInternalID.
// Check the length with:
//     len(mockedDeviceManagementClient.FindDeviceFromInternalIDCalls())
func (mock *DeviceManagementClientMock) FindDeviceFromInternalIDCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockFindDeviceFromInternalID.RLock()
	calls = mock.calls.FindDeviceFromInternalID
	mock.lockFindDeviceFromInternalID.RUnlock()
	return calls
}
